# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_PcbRouter')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_PcbRouter')
    _PcbRouter = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_PcbRouter', [dirname(__file__)])
        except ImportError:
            import _PcbRouter
            return _PcbRouter
        try:
            _mod = imp.load_module('_PcbRouter', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _PcbRouter = swig_import_helper()
    del swig_import_helper
else:
    import _PcbRouter
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class GridBasedRouter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GridBasedRouter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GridBasedRouter, name)
    __repr__ = _swig_repr

    def __init__(self, db: 'kicadPcbDataBase &'):
        this = _PcbRouter.new_GridBasedRouter(db)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PcbRouter.delete_GridBasedRouter
    __del__ = lambda self: None

    def route(self) -> "void":
        return _PcbRouter.GridBasedRouter_route(self)

    def initialization(self) -> "void":
        return _PcbRouter.GridBasedRouter_initialization(self)

    def set_grid_scale(self, _iS: 'int const') -> "void":
        return _PcbRouter.GridBasedRouter_set_grid_scale(self, _iS)

    def set_num_iterations(self, _numRRI: 'int const') -> "void":
        return _PcbRouter.GridBasedRouter_set_num_iterations(self, _numRRI)

    def set_enlarge_boundary(self, _eB: 'int const') -> "void":
        return _PcbRouter.GridBasedRouter_set_enlarge_boundary(self, _eB)

    def set_wirelength_weight(self, _ww: 'double const') -> "void":
        return _PcbRouter.GridBasedRouter_set_wirelength_weight(self, _ww)

    def set_diagonal_wirelength_weight(self, _dww: 'double const') -> "void":
        return _PcbRouter.GridBasedRouter_set_diagonal_wirelength_weight(self, _dww)

    def set_layer_change_weight(self, _lCC: 'double const') -> "void":
        return _PcbRouter.GridBasedRouter_set_layer_change_weight(self, _lCC)

    def set_track_obstacle_weight(self, _toc: 'double const') -> "void":
        return _PcbRouter.GridBasedRouter_set_track_obstacle_weight(self, _toc)

    def set_via_obstacle_weight(self, _voc: 'double const') -> "void":
        return _PcbRouter.GridBasedRouter_set_via_obstacle_weight(self, _voc)

    def set_pad_obstacle_weight(self, _poc: 'double const') -> "void":
        return _PcbRouter.GridBasedRouter_set_pad_obstacle_weight(self, _poc)

    def set_track_obstacle_step_size(self, _tocss: 'double const') -> "void":
        return _PcbRouter.GridBasedRouter_set_track_obstacle_step_size(self, _tocss)

    def set_via_obstacle_step_size(self, _vocss: 'double const') -> "void":
        return _PcbRouter.GridBasedRouter_set_via_obstacle_step_size(self, _vocss)

    def set_net_layer_pref_weight(self, _netId: 'int const', _layerName: 'std::string const &', _weight: 'int const') -> "void":
        return _PcbRouter.GridBasedRouter_set_net_layer_pref_weight(self, _netId, _layerName, _weight)

    def set_net_all_layers_pref_weights(self, _netId: 'int const', _weight: 'int const') -> "void":
        return _PcbRouter.GridBasedRouter_set_net_all_layers_pref_weights(self, _netId, _weight)

    def get_grid_scale(self) -> "unsigned int":
        return _PcbRouter.GridBasedRouter_get_grid_scale(self)

    def get_num_iterations(self) -> "unsigned int":
        return _PcbRouter.GridBasedRouter_get_num_iterations(self)

    def get_enlarge_boundary(self) -> "unsigned int":
        return _PcbRouter.GridBasedRouter_get_enlarge_boundary(self)

    def get_wirelength_weight(self) -> "double":
        return _PcbRouter.GridBasedRouter_get_wirelength_weight(self)

    def get_diagonal_wirelength_weight(self) -> "double":
        return _PcbRouter.GridBasedRouter_get_diagonal_wirelength_weight(self)

    def get_layer_change_weight(self) -> "double":
        return _PcbRouter.GridBasedRouter_get_layer_change_weight(self)

    def get_track_obstacle_weight(self) -> "double":
        return _PcbRouter.GridBasedRouter_get_track_obstacle_weight(self)

    def get_via_obstacle_weight(self) -> "double":
        return _PcbRouter.GridBasedRouter_get_via_obstacle_weight(self)

    def get_pad_obstacle_weight(self) -> "double":
        return _PcbRouter.GridBasedRouter_get_pad_obstacle_weight(self)

    def get_track_obstacle_step_size(self) -> "double":
        return _PcbRouter.GridBasedRouter_get_track_obstacle_step_size(self)

    def get_via_obstacle_step_size(self) -> "double":
        return _PcbRouter.GridBasedRouter_get_via_obstacle_step_size(self)

    def get_total_cost(self) -> "double":
        return _PcbRouter.GridBasedRouter_get_total_cost(self)

    def get_routed_wirelength(self, *args) -> "double":
        return _PcbRouter.GridBasedRouter_get_routed_wirelength(self, *args)

    def get_routed_num_vias(self, *args) -> "int":
        return _PcbRouter.GridBasedRouter_get_routed_num_vias(self, *args)

    def get_routed_num_bends(self, *args) -> "int":
        return _PcbRouter.GridBasedRouter_get_routed_num_bends(self, *args)
GridBasedRouter_swigregister = _PcbRouter.GridBasedRouter_swigregister
GridBasedRouter_swigregister(GridBasedRouter)

# This file is compatible with both classic and new-style classes.


